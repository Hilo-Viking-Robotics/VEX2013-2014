#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, I2C_1,  lift,           sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  drive,          sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           backLDrive,    tmotorVex269, openLoop, reversed, encoder, encoderPort, I2C_2, 1000)
#pragma config(Motor,  port2,           frontLDrive,   tmotorVex269, openLoop)
#pragma config(Motor,  port3,           midLDrive,     tmotorVex269, openLoop)
#pragma config(Motor,  port4,           leftLift,      tmotorVex269, openLoop, reversed)
#pragma config(Motor,  port5,           leftIntake,    tmotorVex269, openLoop, reversed)
#pragma config(Motor,  port6,           rightIntake,   tmotorVex269, openLoop)
#pragma config(Motor,  port7,           rightLift,     tmotorVex269, openLoop, encoder, encoderPort, I2C_1, 1000)
#pragma config(Motor,  port8,           midRDrive,     tmotorVex269, openLoop, reversed)
#pragma config(Motor,  port9,           frontRDrive,   tmotorVex269, openLoop, reversed)
#pragma config(Motor,  port10,          backRDrive,    tmotorVex269, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
//					2013-2014 VEX Toss Up
//			Robot Number: 1378Z		Team: Thaddeus O'Connell, Josh Wilson, Alex Peterson
//			Description: 6-motor WD, 2-motor six-bar lift, 2-motor intake
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

//---------------------------------------PID Below--------------------------------------------------//
int armHeight = 0;

task ArmControl()
{
	int error = 0;
	int speed = 0;
	float integral = 0;
	float derivative = 0;
	int previousError = 0;
	int encoderValue = 0;

	const int ACCEPTABLE_ERROR = 0;
	const int INTEGRAL_UPPER_BOUND = 20;

	int P_VALUE = 0; //For debugging.	 Calculates constant*value to view amount of motor adjustment for each of the 3 parts.
	int I_VALUE = 0;
	int D_VALUE = 0;

	float KP = 0.4; //0.4
	float KI = 0;
	float KD = 0;

	//SensorValue(lift) = 0;

	while (1) //Loop continously to make sure task doesn't stop
	{

		//if( SensorValue(lift) > 512 )
		//{
		//	ArmHeight = 512;
		//}
		//else
		//	{
		//	ArmHeight = SensorValue(lift);
		//	}

		//-------find the error-----------------------------
		encoderValue = SensorValue(lift);
		error = armHeight - encoderValue;	 //Remember, error can be + or -
		if( abs(error) < ACCEPTABLE_ERROR )
		{
			error = 0;
		}
		//--------get the integral--------------------------
		integral = integral + error;
		if ( error == 0 )
		{
			integral = 0;
		}
		if ( (integral * KI) > INTEGRAL_UPPER_BOUND)
		{
			integral = 0;
		}


		//---------get derivitive and previous error--------
		derivative = error - previousError;
		previousError = error;

		//---------Factor in the constants (for debugging)--
		P_VALUE = KP * error;
		I_VALUE = KI * integral;
		D_VALUE = KD * derivative;

		//---------set speed using PID and K constants------
		speed = P_VALUE + I_VALUE + D_VALUE;

		//---------motor control goes here------------------
		if( vexRT( Btn5U ) )
		{
			motor[leftLift] = 127;
			motor[rightLift] = 127;

			armHeight = SensorValue(lift) + 8;
		}
		else if( vexRT( Btn5D ) )
		{
			motor[leftLift] = -127;
			motor[rightLift] = -127;

			armHeight = SensorValue(lift);
		}


		else //4if ( !(SensorValue(liftEncoder) < 10 ) && !(armHeight < 10 ) )
		{
			motor[leftLift] = speed;
			motor[rightLift] = speed;
		}



		//wait1Msec(5);

	}
}
void Move( int howFast, int howFar )
{
	while( abs(SensorValue[drive]) < howFar )
	{

		motor[frontLDrive] = howFast;
		motor[midLDrive] = howFast;
		motor[backLDrive] = howFast;
		motor[frontRDrive] = howFast;
		motor[midRDrive] = howFast;
		motor[backRDrive] = howFast;

	}
	 	motor[frontLDrive] = 0;
		motor[midLDrive] = 0;
		motor[backLDrive] = 0;
		motor[frontRDrive] = 0;
		motor[midRDrive] = 0;
		motor[backRDrive] = 0;
	SensorValue[drive] = 0;
}

void PointTurn( int leftDrive, int rightDrive, int turnDegree )
{
	while( abs(SensorValue[drive]) < abs(turnDegree) )
	{
		motor[frontLDrive] = leftDrive;
		motor[midLDrive] = leftDrive;
		motor[backLDrive] = leftDrive;
		motor[frontRDrive] = rightDrive;
		motor[midRDrive] = rightDrive;
		motor[backRDrive] = rightDrive;
	}

		motor[frontLDrive] = 0;
		motor[midLDrive] = 0;
		motor[backLDrive] = 0;
		motor[frontRDrive] = 0;
		motor[midRDrive] = 0;
		motor[backRDrive] = 0;

	SensorValue[drive] = 0;
}

void LiftArm( int armSpeed, int howHigh )
{
	while( abs(SensorValue(lift) ) < howHigh )
	{
		motor[leftLift] = armSpeed;
		motor[leftLift] = armSpeed;
	}

		motor[leftLift] = armSpeed;
		motor[leftLift] = armSpeed;
}

void Intake ( int intakeSpeed, int howLong )
{
	motor[leftIntake] = intakeSpeed;
	motor[rightIntake] = intakeSpeed;
	wait10Msec(howLong);
}

void Outtake ( int intakeSpeed, int howLong )
{
	motor[leftIntake] = -intakeSpeed;
	motor[rightIntake] = -intakeSpeed;
	wait10Msec(howLong);
}


void autoOne()
{
	Move(127, 200 );
	Move(-127, 200);
	armHeight = 400;
	Move(127, 1200 );
	Move(-127, 1400);
	wait1Msec(3000);
	Move(127, 1600 );
	Outtake(127, 200);
	wait1Msec(5000);


}

void AutoBlueZero()
{
	SensorValue(lift) = 0;
	SensorValue(drive) = 0;

	Intake(127, 200);

	Move( 127, 100 );

	Move(-80, 50 );

	PointTurn( -127, 127, 50);

	Move( 127, 150 );

	PointTurn ( -127, 127, 150 );

	armHeight = 20;

	Move( 100, 100);
}



/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
  // Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
  // .....................................................................................
  // Insert user code here.
  // .....................................................................................

	AutonomousCodePlaceholderForTesting();  // Remove this function call once you have "real" code.
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	//armHeight = 0;
	StartTask(ArmControl);

	while (true)
	{

		wait1Msec(25);
		motor[frontLDrive] = vexRT[Ch3];
		motor[midLDrive] = vexRT[Ch3];
		motor[backLDrive] = vexRT[Ch3];
		motor[frontRDrive] = vexRT[Ch2];
		motor[midRDrive] = vexRT[Ch2];
		motor[backRDrive] = vexRT[Ch2];


		if( vexRT( Btn5U ) )
		{
			motor[leftLift] = 127;
			motor[rightLift] = 127;
		}
		else if( vexRT( Btn5D ) )
		{
			motor[leftLift] = -127;
			motor[rightLift] = -127;
		}
		else
		{
			motor[leftLift] = 0;
			motor[rightLift] = 0;
		}

		if( vexRT( Btn6U ) )
		{
			motor[leftIntake] = 127;
			motor[rightIntake] = 127;
		}
		else if( vexRT( Btn6D ) )
		{
			motor[leftIntake] = -127;
			motor[rightIntake] = -127;
		}
		else
		{
			motor[leftIntake] = 0;
			motor[rightIntake] = 0;
		}

	}
}
