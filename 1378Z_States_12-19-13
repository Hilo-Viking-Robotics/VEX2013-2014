#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl1,  rightSolenoid,  sensorDigitalOut)
#pragma config(Sensor, dgtl2,  leftSolenoid,   sensorDigitalOut)
#pragma config(Sensor, I2C_1,  lift,           sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  drive,          sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           RightBackDrive, tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port2,           RightFrontDrive, tmotorVex393, openLoop, encoder, encoderPort, I2C_2, 0)
#pragma config(Motor,  port3,           LeftInnerLift, tmotorVex393, openLoop, reversed, encoder, encoderPort, I2C_1, 1000)
#pragma config(Motor,  port4,           LeftOuterLift, tmotorVex393, openLoop)
#pragma config(Motor,  port5,           Winch,         tmotorVex393, openLoop)
#pragma config(Motor,  port6,           LeftIntake,    tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port7,           RightOuterLift, tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port8,           RightInnerLift, tmotorVex393, openLoop)
#pragma config(Motor,  port9,           LeftFrontDrive, tmotorVex393, openLoop)
#pragma config(Motor,  port10,          LeftBackDrive, tmotorVex393, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!
int armHeight = 0;

//int AutoControl = 1;

//AutoControl = SensorValue(in1);

task ArmControl()
{
	int error = 0;
	int speed = 0;
	float integral = 0;
	float derivative = 0;
	int previousError = 0;
	int encoderValue = 0;

	const int ACCEPTABLE_ERROR = 0;
	const int INTEGRAL_UPPER_BOUND = 100;

	int P_VALUE = 0; //For debugging.  Calculates constant*value to view amount of motor adjustment for each of the 3 parts.
	int I_VALUE = 0;
	int D_VALUE = 0;

	float KP = 0.6; //0.4
	float KI = 0;
	float KD = 0;

	//SensorValue(lift) = 0;
	while (1) //Loop continously to make sure task doesn't stop
	{
		//-------find the error-----------------------------
		encoderValue = SensorValue(lift);
		error = armHeight - encoderValue;  //Remember, error can be + or -
		if( abs(error) < ACCEPTABLE_ERROR )
		{
			error = 0;
		}
		//--------get the integral--------------------------
		integral = integral + error;
		if ( error == 0 )
		{
			integral = 0;
		}
		if ( integral * KI > INTEGRAL_UPPER_BOUND)
		{
			integral = 0;
		}


		//---------get derivitive and previous error--------
		derivative = error - previousError;
		previousError = error;

		//---------Factor in the constants (for debugging)--
		P_VALUE = KP * error;
		I_VALUE = KI * integral;
		D_VALUE = KD * derivative;

		//---------set speed using PID and K constants------
		speed = P_VALUE + I_VALUE + D_VALUE;

		//---------motor control goes here------------------
		if( vexRT( Btn6U ) )
		{
			motor[LeftInnerLift] = 127;
			motor[LeftOuterLift] = 127;
			motor[RightInnerLift] = 127;
			motor[RightOuterLift] = 127;

			ArmHeight = SensorValue(lift) + 8;
		}
		else if( vexRT( Btn6D ) )
		{
			motor[LeftInnerLift] = -127;
			motor[LeftOuterLift] = -127;
			motor[RightInnerLift] = -127;
			motor[RightOuterLift] = -127;

			ArmHeight = SensorValue(lift);
		}

		else //4if ( !(SensorValue(liftEncoder) < 10 ) && !(armHeight < 10 ) )
		{
			motor[LeftInnerLift] = speed;
			motor[LeftOuterLift] = speed;
			motor[RightInnerLift] = speed;
			motor[RightOuterLift] = speed;
		}
	}
}

void MoveForward( int timeWait )
{

	motor[port1] = 127;
	motor[port2] = 127;
	motor[port9] = 127;
	motor[port10] = 127;

	wait1Msec( timeWait );

	motor[port1] = 0;
	motor[port2] = 0;
	motor[port9] = 0;
	motor[port10] = 0;
}

void MoveBack( int timeWait )
{

	motor[LeftFrontDrive] = -127;
	motor[LeftBackDrive] = -127;
	motor[RightFrontDrive] = -127;
	motor[RightFrontDrive] = -127;

	wait1Msec( timeWait );

	motor[LeftFrontDrive] = 0;
	motor[LeftBackDrive] = 0;
	motor[RightFrontDrive] = 0;
	motor[RightFrontDrive] = 0;
}

void LiftArm( int timeLift )
{
	motor[RightInnerLift] = 127;
	motor[RightOuterLift] = 127;
	motor[LeftInnerLift] = 127;
	motor[LeftOuterLift] = 127;
	wait1Msec( timeLift );
		motor[RightInnerLift] = 20;
	motor[RightOuterLift] = 20;
	motor[LeftInnerLift] = 20;
	motor[LeftOuterLift] = 20;
}

void Turn( int leftDrive, int rightDrive, int timeTurn )
{
		motor[LeftFrontDrive] = leftDrive;
	motor[LeftBackDrive] = leftDrive;
	motor[RightFrontDrive] = rightDrive;
	motor[RightFrontDrive] = rightDrive;
	wait1Msec( timeTurn );
		motor[LeftFrontDrive] = 0;
	motor[LeftBackDrive] = 0;
	motor[RightFrontDrive] = 0;
	motor[RightFrontDrive] = 0;
}

void Move( int howFast, int howFar )
{

	SensorValue[drive] = 0;
	while( abs(SensorValue[drive]) < howFar )
	{

		motor[LeftFrontDrive] = howFast;
		motor[LeftBackDrive] = howFast;

		motor[RightFrontDrive] = howFast;
		motor[RightBackDrive] = howFast;
	}
	motor[LeftFrontDrive] = 0;
	motor[LeftBackDrive] = 0;

	motor[RightFrontDrive] = 0;
	motor[RightBackDrive] = 0;

}

void PointTurn( int leftDrive, int rightDrive, int turnDegree )
{
	SensorValue[drive] = 0;
	while( abs(SensorValue[drive]) < abs(turnDegree) )
	{
		motor[LeftFrontDrive] = leftDrive;
		motor[LeftBackDrive] = leftDrive;

		motor[RightFrontDrive] = rightDrive;
		motor[RightBackDrive] = rightDrive;
	}
	motor[LeftFrontDrive] = 0;
	motor[LeftBackDrive] = 0;

	motor[RightFrontDrive] = 0;
	motor[RightBackDrive] = 0;
}

/*void Intake( int intakeMotors )
{
	motor[Intake] = intakeMotors;
}*/

///---------------------------Autos----------0----------------------//

void TimeAuto()
{

}

void AutoZeroRed()
{

}

void AutoZeroBlue()
{

}

void AutoMidZoneBlue()
{

}

void AutoMidZoneRed()
{

}

void ProgrammingSkills()
{
	/*SensorValue(lift) = 0;
	SensorValue(drive) = 0;
	StartTask(armControl);
	armHeight = 800;
	wait1Msec(300);
	Move( 80, 900 );
	Move( -127, 400);
	armHeight = 0;
	PointTurn(127, -127, 140);
	Move(127, 1200);
	PointTurn(-127, 127, 70);
	armHeight = 1250;
	wait1Msec(1000);
	Move(127, 830);
	wait1Msec(1);
	Intake(-127);
  wait1Msec(750);
	Intake(0);
	Move(-127, 300);
	armHeight = 0;
	wait1Msec(1000);
	PointTurn(127,-127,70);
	Move(-127, 1200);
	wait1Msec(2000);
	Move(127, 1600);
	Intake(127);
	wait1Msec(200);
	Move( 100, 500);
	wait1Msec(900);
	Intake( 0 );
	Move( -127, 300);
	wait1Msec(2000);
	Move(127,1500);
	wait1Msec(1500);
	PointTurn(127,-127,70);
	Move(127, 1200);
	wait1Msec(500);
	PointTurn(-127, 127, 70);
	armHeight = 1300;
	wait1Msec(1000);
	Move(127, 900);
	wait1Msec(200);
	Intake(-127);
	wait1Msec(1500);
	Move(-127, 170);
	Intake(0);
	armHeight = 0;
	wait1Msec(500);
	PointTurn(127,-127,70);
	Move(-127, 1200);
	wait1Msec(2000);
	armHeight = 800;
	Move(127, 1000);
	PointTurn(-127, 127, 380);
	wait1Msec(500);
	Move(127, 700);
	Move(-127, 300);
	wait1Msec(500);
	PointTurn(127, -127, 320);
	Move(127, 1050);
	PointTurn(-127, 127, 380);
	wait1Msec(500);
	Move(127, 400);
	Move(-127, 300);
	wait1Msec(500);
	PointTurn(127, -127, 320);
	Move(127, 850);
	PointTurn(-127, 127, 400);
	Move(127, 900);
	Move(-127, 400);
	Turn(-127, 127, 900);
	wait1Msec(100);
	Move(127, 3000);
	armHeight = 0;
	wait1Msec(1250);
	Move(127, 2300);
	wait1Msec(1250);
	Intake(127);
	armHeight = 600;
	Move(127, 600);
	Move(127, 800);
	armHeight = 100;
	PointTurn(-127, 127, 30);
	Move(-127, 1050);
	armHeight = 1400;
	wait1Msec(2000);
	Move(-127, 200);
	PointTurn(127, -127, 120);
	wait1Msec(300);
	Move(-127, 200);
	motor[Winch] = 127;
	StopTask(ArmControl);
	motor[LeftInnerLift] = -127;
	motor[LeftOuterLift] = -127;
	motor[RightInnerLift] = -127;
	motor[RightOuterLift] = -127;*/
}


/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
	// Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;
	SensorValue( lift ) = 0;



	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                             Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
	StartTask(armControl);
SensorValue( lift ) = 0;
SensorValue(drive) = 0;
motor[LeftIntake] = 127;
Move( 80, 375 );
wait1Msec(800);
Move( 80, 280 );
wait1Msec( 1000 );
Move( -80, 100 );
motor[LeftIntake] = 0;
PointTurn( -80, 80, 700 );
Move( 127, 900 );
armHeight = 20; 
motor[LeftIntake] = -127;
wait1Msec(5000);
motor[LeftIntake] = 0;



	
	/*StartTask(armControl);
SensorValue( lift ) = 0;
SensorValue(drive) = 0;
armHeight = 600;
motor[LeftIntake] = 127;
wait1Msec(300);
Move( 127, 650 );
wait1Msec(200);
Move( -127, 400);
wait1Msec(200);

//RED
//PointTurn( 80, -80, 250);
//BLUE
PointTurn( -80, 80, 80 );

Move( 127, 790);
wait1Msec(500);
Move(-127, 300);
wait1Msec(200);
ArmHeight = 0;

wait1Msec(4000);
motor[LeftIntake] = 0;
Move(127,1200);
armHeight = 850;
wait1Msec(500);
Move( 70, 600 );
wait1Msec(300);
motor[LeftIntake] = -127;
wait1Msec(2000);
motor[LeftIntake] = 0;
Move(-80, 300);
armHeight = 0;*/



/*Move(127, 500); 
motor[LeftIntake] = -127; 
wait1Msec(3000);
motor[LeftIntake] = 0;*/

}
/*arm 607
drive 1100
drive -700

drive angle 132

drive 1800*/


	
	/*SensorValue(lift) = 0;
	SensorValue(drive) = 0;
	StartTask(armControl);
	armHeight = 800;
	wait1Msec(300);
	Move( 80, 900 );
	Move( -127, 400);
	armHeight = 0;
	PointTurn(127, -127, 140);
	Move(127, 1200);
	PointTurn(-127, 127, 70);
	armHeight = 1250;
	wait1Msec(1000);
	Move(127, 830);
	wait1Msec(1);
	Intake(-127);
  wait1Msec(750);
	Intake(0);
	Move(-127, 300);
	armHeight = 0;
	wait1Msec(1000);
	PointTurn(127,-127,70);
	Move(-127, 1200);
	wait1Msec(2000);
	Move(127, 1600);
	Intake(127);
	wait1Msec(200);
	Move( 100, 500);
	wait1Msec(900);
	Intake( 0 );
	Move( -127, 300);
	wait1Msec(2000);
	Move(127,1500);
	wait1Msec(1500);
	PointTurn(127,-127,70);
	Move(127, 1200);
	wait1Msec(500);
	PointTurn(-127, 127, 70);
	armHeight = 1300;
	wait1Msec(1000);
	Move(127, 900);
	wait1Msec(200);
	Intake(-127);
	wait1Msec(1500);
	Move(-127, 170);
	Intake(0);
	armHeight = 0;
	wait1Msec(500);
	PointTurn(127,-127,70);
	Move(-127, 1200);
	wait1Msec(2000);
	armHeight = 800;
	Move(127, 1000);
	PointTurn(-127, 127, 380);
	wait1Msec(500);
	Move(127, 700);
	Move(-127, 300);
	wait1Msec(500);
	PointTurn(127, -127, 320);
	Move(127, 1050);
	PointTurn(-127, 127, 380);
	wait1Msec(500);
	Move(127, 400);
	Move(-127, 300);
	wait1Msec(500);
	PointTurn(127, -127, 320);
	Move(127, 850);
	PointTurn(-127, 127, 400);
	Move(127, 900);
	Move(-127, 400);
	Turn(-127, 127, 900);
	wait1Msec(100);
	Move(127, 3000);
	armHeight = 0;
	wait1Msec(1250);
	Move(127, 2300);
	wait1Msec(1250);
	Intake(127);
	armHeight = 600;
	Move(127, 600);
	Move(127, 800);
	armHeight = 100;
	PointTurn(-127, 127, 30);
	Move(-127, 1050);
	armHeight = 1400;
	wait1Msec(2000);
	Move(-127, 200);
	PointTurn(127, -127, 120);
	wait1Msec(300);
	Move(-127, 200);
	motor[Winch] = 127;
	StopTask(ArmControl);
	motor[LeftInnerLift] = -127;
	motor[LeftOuterLift] = -127;
	motor[RightInnerLift] = -127;
	motor[RightOuterLift] = -127;*/

	

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	SensorValue(lift) = 0;
	SensorValue(drive) = 0;
	armHeight = 0;
	StopTask(ArmControl);
	while( true )
	{
		wait1Msec(25);
		motor[RightBackDrive] = vexRT[Ch2];
		motor[RightFrontDrive] = vexRT[Ch2];

		motor[LeftFrontDrive] = vexRT[Ch3];
		motor[LeftBackDrive] = vexRT[Ch3];

		if( vexRT( Btn6U ) )
		{
			StartTask(ArmControl);
			motor[LeftInnerLift] = 127;
			motor[LeftOuterLift] = 127;
			motor[RightInnerLift] = 127;
			motor[RightOuterLift] = 127;
		}
		else if( vexRT( Btn6D ) )
		{
			StopTask(ArmControl);
			motor[LeftInnerLift] = -127;
			motor[LeftOuterLift] = -127;
			motor[RightInnerLift] = -127;
			motor[RightOuterLift] = -127;

		}
		else
		{
			motor[LeftInnerLift] = 0;
			motor[LeftOuterLift] = 0;
			motor[RightInnerLift] = 0;
			motor[RightOuterLift] = 0;
		}

		if( vexRT( Btn5U ) )
		{
			motor[LeftIntake] = 127;
		
		}
		else if( vexRT( Btn5D ) )
		{
			motor[LeftIntake] = -127;

		}
		else
		{
			motor[LeftIntake] = 0;
		
		}

		if( vexRT( Btn8D ) == 1 )
		{
			motor[Winch] = 127;
		}
		else if( vexRT( Btn8D ) == 0 )
		{
			motor[Winch] = 0;
		}
		wait1Msec(5);
	}
}
