#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl1,  solenoidL,      sensorDigitalOut)
#pragma config(Sensor, dgtl8,  solenoidR,      sensorDigitalOut)
#pragma config(Sensor, I2C_1,  drive,          sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Sensor, I2C_2,  lift,           sensorQuadEncoderOnI2CPort,    , AutoAssign)
#pragma config(Motor,  port1,           driveLBack,    tmotorVex393, openLoop)
#pragma config(Motor,  port2,           driveLMid,     tmotorVex393, openLoop)
#pragma config(Motor,  port3,           liftLin,       tmotorVex393, openLoop)
#pragma config(Motor,  port4,           liftL,         tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port5,           winch,         tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port6,           intakeR,       tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port7,           liftR,         tmotorVex393, openLoop)
#pragma config(Motor,  port8,           liftRin,       tmotorVex393, PIDControl, reversed, encoder, encoderPort, I2C_1, 1000)
#pragma config(Motor,  port9,           driveRMid,     tmotorVex393, openLoop, reversed)
#pragma config(Motor,  port10,          driveRBack,    tmotorVex393, openLoop, encoder, encoderPort, I2C_2, 1000)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!
void autobackblue();
void autobackred();
void autoblue();
void autored();
int armHeight = 0;

task ArmControl()
{
	int error = 0;
	int speed = 0;
	float integral = 0;
	float derivative = 0;
	int previousError = 0;
	int encoderValue = 0;

	const int ACCEPTABLE_ERROR = 0;
	const int INTEGRAL_UPPER_BOUND = 100;

	int P_VALUE = 0; //For debugging.  Calculates constant*value to view amount of motor adjustment for each of the 3 parts.
	int I_VALUE = 0;
	int D_VALUE = 0;

	float KP = -0.8; //0.4
	float KI = 0;
	float KD = 0;

	SensorValue(lift) = 0;
	while (1) //Loop continously to make sure task doesn't stop
	{
		//-------find the error-----------------------------
		encoderValue = SensorValue(LIFT);
		error = armHeight - encoderValue;  //Remember, error can be + or -
		if( abs(error) < ACCEPTABLE_ERROR )
		{
			error = 0;
		}
		//--------get the integral--------------------------
		integral = integral + error;
		if ( error == 0 )
		{
			integral = 0;
		}
		if ( integral * KI > INTEGRAL_UPPER_BOUND)
		{
			integral = 0;
		}


		//---------get derivitive and previous error--------
		derivative = error - previousError;
		previousError = error;

		//---------Factor in the constants (for debugging)--
		P_VALUE = KP * error;
		I_VALUE = KI * integral;
		D_VALUE = KD * derivative;

		//---------set speed using PID and K constants------
		speed = P_VALUE + I_VALUE + D_VALUE;

		//---------motor control goes here------------------
		if( vexRT( Btn6U ) )
		{
			KP = -0.8;
			motor[liftl] = 127;
			motor[liftLin] = 127;
			motor[liftR] = 127;
			motor[liftRin] = 127;
			ArmHeight = SensorValue(lift) + 8;
		}
		else if( vexRT( Btn6D ) )
		{
			KP = 0;
			motor[liftL] = -127;
			motor[liftLin] = -127;
			motor[liftR] = -127;
			motor[liftRin] = -127;
			ArmHeight = SensorValue(lift);
		}
		else //4if ( !(SensorValue(liftEncoder) < 10 ) && !(armHeight < 10 ) )
		{
			motor[liftL] = speed;
			motor[liftLin] = speed;
			motor[liftR] = speed;
			motor[liftRin] = speed;
		}
		//wait1Msec(5);
	}
}

void Move( int howFast, int howFar )
{

	SensorValue[drive] = 0;
	while( abs(SensorValue[drive]) < howFar )
	{

		motor[driveLBack] = howFast;
		motor[driveLMid] = howFast;

		motor[driveRBack] = howFast;
		motor[driveRMid] = howFast;
	}

   	motor[driveLBack] = 0;
		motor[driveLMid] = 0;

		motor[driveRBack] = 0;
		motor[driveRMid] = 0;

}
void Intake( int intakeMotors )
{
	motor[intakeR] = intakeMotors;
}

void rightturn(int howfast, int howfar)
{
		SensorValue[drive] = 0;
	while( abs(SensorValue[drive]) < howFar )
	{
	motor[driveLBack] = -howfast;
	motor[driveLMid] = -howfast;
	motor[driveRBack] = howfast;
	motor[driveRMid] = howfast;
}
 	motor[driveLBack] = 0;
		motor[driveLMid] = 0;

		motor[driveRBack] = 0;
		motor[driveRMid] = 0;
}
void leftturn(int howfast, int howFar)
{
		SensorValue[drive] = 0;
	while( abs(SensorValue[drive]) < howFar )
	{
	motor[driveLBack] = howfast;
	motor[driveLMid] = howfast;
	motor[driveRBack] = -howfast;
	motor[driveRMid] = -howfast;
}
 	motor[driveLBack] = 0;
		motor[driveLMid] = 0;

		motor[driveRBack] = 0;
		motor[driveRMid] = 0;
}

	void autobackred()
	{
		Intake(127);
		Move(127, 1000);
		wait1Msec(1000);
		Move(-127, 1200);
		armHeight = -900;
		wait1Msec(1500);
		Move(-127, 200);
		wait1Msec(500);
		rightturn(127, 70);
		wait1Msec(500);
		Move(-127, 300);
		motor[winch] = 127;
		Intake(0);
		wait1Msec(3000);
		StopTask(ArmControl);
		Intake(127);
		motor[liftL] = -70;
		motor[liftLin] = -70;
		motor[liftR] = -70;
		motor[liftRin] = -70;
		wait1Msec(700);
		motor[liftL] = 0;
		motor[liftLin] = 0;
		motor[liftR] = 0;
		motor[liftRin] = 0;

	}
	void autobackblue()
	{
		Intake(127);
		Move(127, 1000);
		wait1Msec(1000);
		Move(-127, 1200);
		armHeight = -900;
		wait1Msec(1500);
		Move(-127, 200);
		wait1Msec(500);
		leftturn(127, 70);
		wait1Msec(250);
		Move(-127, 300);
		motor[winch] = 127;
		wait1Msec(3000);
		StopTask(ArmControl);
		motor[liftL] = -70;
		motor[liftLin] = -70;
		motor[liftR] = -70;
		motor[liftRin] = -70;
		wait1Msec(700);
		motor[liftL] = 0;
		motor[liftLin] = 0;
		motor[liftR] = 0;
		motor[liftRin] = 0;
	}
void autored()
{
	armHeight = -500;
	wait1Msec(200);
	Move(127, 800);
	Move(-127, 200);
	armHeight = 0;
	wait1Msec(700);
	rightturn(127, 25);
	Move(127, 1100);
	armHeight = -800;
	wait1Msec(1500);
	Move(90, 200);
	Intake(-127);
	wait1Msec(2000);
	Move(-127, 150);
	wait1Msec(700);
	armHeight = 0;
	wait1Msec(500);
	rightturn(127, 30);
	Move(-127, 1300);
	wait1Msec(1000);
	armHeight = -500;
	wait1Msec(1000);
	Move(127, 200);
	leftturn(127, 120);
	Move(127, 900);
}
	void autoblue()
{
	armHeight = -500;
	wait1Msec(200);
	Move(127, 900);
	Move(-127, 400);
	wait1Msec(100);
	armHeight = 0;
	leftturn(127, 70);
	Move(127, 700);
	rightturn(127, 50);
	armHeight = -800;
	wait1Msec(1000);
	Move(127, 500);
	Intake(-127);
	wait1Msec(2000);
	Move(-127, 300);
	wait1Msec(200);
	armHeight = 0;
	leftturn(127, 40);
	Move(-127, 1300);
	wait1Msec(1000);
	armHeight = -500;
	wait1Msec(1000);
	Move(127, 200);
	rightturn(127, 80);
	Move(127, 900);
}


/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
  // Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
	armHeight = 0;
		StartTask(ArmControl);
		SensorValue(drive) = 0;
		autobackblue();
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	armHeight = 0;
	StartTask(ArmControl);
	while( true )
	{

		wait1Msec(25);

		motor[driveLMid] = vexRT[Ch2];
		motor[driveLBack] = vexRT[Ch2];


		motor[driveRMid] = vexRT[Ch3];
		motor[driveRBack] = vexRT[Ch3];

		if( vexRT( Btn6U ) )
		{
			motor[liftL] = 127;
			motor[liftLin] = 127;
			motor[liftR] = 127;
			motor[liftRin] = 127;
		}
		else if( vexRT( Btn6D ) )
		{
			motor[liftL] = -127;
			motor[liftLin] = -127;
			motor[liftR] = -127;
			motor[liftRin] = -127;
		}
		else
		{
		motor[liftL] = 0;
			motor[liftLin] = 0;
			motor[liftR] = 0;
			motor[liftRin] = 0;
		}

		if( vexRT( Btn5U ) )
		{
			motor[intakeR] = 127;
		}
		else if( vexRT( Btn5D ) )
		{
			motor[intakeR] = -127;

		}
		else
		{
			motor[intakeR] = 0;
		}
		if (vexRT[Btn8D] == 1)
		{
			motor[winch] = 127;
		}
		else if (vexRT[Btn8U] == 1)
		{
			motor[winch] = -127;
		}
		else
		{
			motor[winch] = 0;
		}

		wait1Msec(5);

}

}
